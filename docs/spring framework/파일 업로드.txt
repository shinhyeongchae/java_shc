# 파일 업로드 기능 추가

- ### 파일 업로드 의존성 추가

```xml
<!-- pom.xml -->
<dependency>
    <groupId>org.imgscalr</groupId>
    <artifactId>imgscalr-lib</artifactId>
    <version>4.2</version>
</dependency>
<dependency>
    <groupId>commons-fileupload</groupId>
    <artifactId>commons-fileupload</artifactId>
    <version>1.3.2</version>
</dependency>
```

* ### 파일 업로드 bean에 등록

```xml
<!-- servlet-context.xml -->
<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- 업로드 최대 크기 10Mb -->
    <beans:property name="maxUploadSize" value="10485760"></beans:property>
</beans:bean>
```

* ###jsp에 파일 업로드창 추가

  * board/register.jsp 에 form태그 수정 및 아래 코드 추가

```jsp
<!-- form 태그 수정 -->
<form method="post" enctype="multipart/form-data">
    <!-- ... 이전 코드 생략 -->
    <!-- 파일 업로드창 추가 -->
    <div class="form-group">
        <label>파일</label>
        <input type="file" class="form-control" name="file"/>
    </div>
</form>
```

* ### 서버에 저장될 파일의 경로 설정

  * 서버에 저장할 경로는 \를 이용하여 표현하며 \를 문자열로 표현하기위해 `\\`로 입력해야한다.

```xml
<!-- servlet-context.xml에 추가 -->
<beans:bean id="uploadPath" class="java.lang.String">
    <!--
	<beans:constructor-arg value="서버에 저장할 경로"></beans:constructor-arg>
	-->
    <beans:constructor-arg value="C:\\git\\uploadfiles"></beans:constructor-arg>
</beans:bean>
```

* ### 서버에 업로드할 파일 저장하기

  * 위에서 등록한 서버 경로를 리소스로 등록

  * BoardController에 /board/register에 해당하는 메소드를 수정한다.
  * 필요한 uploadFile메소드를 생성한다.

```java
@Resource
private String uploadPath;

/* uploadFile에서 예외가 발생할 수 있으므로 throws 추가 */ 
@RequestMapping(value="register", method=RequestMethod.POST)
public String boardRegisterPost(Board board
			,HttpServletRequest request, MultipartFile file) throws Exception {
	/* ... 이전 코드 생략 */

	uploadFile(file.getOriginalFilename(),file.getBytes());
	return "redirect:/board/list";
}
/* 서버에 저장 */
private String uploadFile(String name, byte[] data)
	throws Exception{
    /* 고유한 파일명을 위해 UUID를 이용 */
	UUID uid = UUID.randomUUID();
	String savaName = uid.toString() + "_" + name;
	File target = new File(uploadPath, savaName);
	FileCopyUtils.copy(data, target);
	return savaName;
}
```

# 서버 폴더에 파일들이 집중되는 문제를 해결을 위한 추가 작업

* 해당 문제를 해결해야하는 이유
  * 특정 폴더에 파일을 업로드하면 많은 파일이 쌓이고 이는 속도의 저하와 파일 갯수 제한에 걸릴 수 있다.
  * 파일을 저장할 때 **/년/월/일**을 별도의 폴더로 구성해서 파일을 보관

* ### UploadFileUtils 클래스 생성

  * 기본패키지명.utils 패키지 생성
  * 기본패키지명.utils 패키지에 UploadFileUtils 클래스 생성
  * 메소드 생성
    * uploadFile : 파일을 업로드하는 메소드
    * calcPath : 업로드한 파일을 저장할 경로를 계산하는 메소드
    * makeDir : 폴더를 생성하는 메소드

```java
public class UploadFileUtils {
	public static String uploadFile(String uploadPath, String originalName, byte[] 	
			fileData)throws Exception{
		UUID uid = UUID.randomUUID();
		String savedName = uid.toString() +"_" + originalName;
		String savedPath = calcPath(uploadPath);
		File target = new File(uploadPath + savedPath, savedName);
		FileCopyUtils.copy(fileData, target);
		String uploadFileName = makeIcon(uploadPath, savedPath, savedName);
		return uploadFileName;
	}
	
	private static String calcPath(String uploadPath) {
		Calendar cal = Calendar.getInstance();
		
		String yearPath = File.separator+cal.get(Calendar.YEAR);
		String monthPath = yearPath + File.separator 
            + new DecimalFormat("00").format(cal.get(Calendar.MONTH)+1);
		String datePath = monthPath + File.separator 
            + new DecimalFormat("00").format(cal.get(Calendar.DATE));
		makeDir(uploadPath, yearPath, monthPath, datePath);
		
		return datePath;
 
	}
	private static void makeDir(String uploadPath, String... paths) {
		if(new File(paths[paths.length-1]).exists())
			return;
		for(String path : paths) {
			File dirPath = new File(uploadPath + path);
			if( !dirPath.exists())
				dirPath.mkdir();
		}
	}
	private static String makeIcon(String uploadPath, String path, String fileName)
        	throws Exception{
		String iconName = uploadPath + path + File.separator + fileName;
		return iconName.substring(uploadPath.length()).replace(File.separatorChar, '/');
	}
}
```

* ### BoardController 수정

```java
@RequestMapping(value="register", method=RequestMethod.POST)
public String boardRegisterPost(Board board
			,HttpServletRequest request, MultipartFile file) throws Exception {
	HttpSession session = request.getSession();
	User user = (User)session.getAttribute("user");
	board.setAuthor(user.getId());
	boardMapper.insertBoard(board);

	//지워진 코드 : uploadFile(file.getOriginalFilename(),file.getBytes());
	//추가된 코드
	UploadFileUtils.uploadFile(uploadPath, file.getOriginalFilename(),file.getBytes());
	return "redirect:/board/list";
}
```

* ### 업로드된 파일 다운로드 테스트

  * BoardController에 /download 추가
  * 테스트는 /board/download?fileName=/년/월/일/파일명.확장자로 테스트한다.

```java
@ResponseBody
@RequestMapping("download")
public ResponseEntity<byte[]> downloadFile(String fileName)throws Exception{
    InputStream in = null;
    ResponseEntity<byte[]> entity = null;
    try{
        String FormatName = fileName.substring(fileName.lastIndexOf(".")+1);
        HttpHeaders headers = new HttpHeaders();
        in = new FileInputStream(uploadPath+fileName);

        fileName = fileName.substring(fileName.indexOf("_")+1);
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.add("Content-Disposition",  "attachment; filename=\"" 
			+ new String(fileName.getBytes("UTF-8"), "ISO-8859-1")+"\"");
        entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in),headers,HttpStatus.CREATED);
    }catch(Exception e) {
        e.printStackTrace();
        entity = new ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST);
    }finally {
        in.close();
    }
    return entity;
}
```



## 참고 

### UUID( 출처 : [위키백과](https://ko.wikipedia.org/wiki/%EB%B2%94%EC%9A%A9_%EA%B3%A0%EC%9C%A0_%EC%8B%9D%EB%B3%84%EC%9E%90))

* **UUID** (universally unique identifier, 범용 고유 식별자)

* **개요**

  * 네트워크 상에서 서로 모르는 개체들을 식별하고 구별하기 위해서는 각각의 고유한 이름이 필요
  * 이 이름은 고유성(유일성)이 매우 중요
  * 같은 이름을 갖는 개체가 존재한다면 구별이 불가능해 지기 때문
  * 고유성을 완벽하게 보장하려면 중앙관리시스템이 있어서 일련번호를 부여해 주면 간단하지만 동시다발적이고 독립적으로 개발되고 있는 시스템들의 경우 중앙관리시스템은 불가능
  * 개발주체가 스스로 이름을 짓도록 하되 고유성을 충족할 수 있는 방법이 필요
  * 이를 위하여 탄생한 것이 범용고유식별자(UUID)이며 국제기구에서 표준으로 지정

* **정의**

  * UUID는 16 옥텟(128비트)의 수이다. 표준형식에서 UUID는 32개의 십육진수로 표현되며 총 36개 문자(32개 문자와 4개의 하이픈)로 된 8-4-4-4-12라는 5개의 그룹을 하이픈으로 구분

  * 예 : 550e8400-e29b-41d4-a716-446655440000 

    

